import "platform:/resource/info.scce.cinco.product.autoDSL/model/Rule.mgl" as rule

@primeviewer
@style("model/AutoDSL.style")
@mcam("check")
@mcam_checkmodule("info.scce.cinco.product.autoDSL.check.autoDSLCheck.CheckForInvalidRulesInGuards")
@mcam_checkmodule("info.scce.cinco.product.autoDSL.check.autoDSLCheck.CheckForUnreachableStates")
@mcam_checkmodule("info.scce.cinco.product.autoDSL.check.autoDSLCheck.CheckForInvalidRulesInStates")
@mcam_checkmodule("info.scce.cinco.product.autoDSL.check.autoDSLCheck.CheckForInvalidEdgesBetweenRules")
@generatable("info.scce.cinco.product.autoDSL.generator", "info.scce.cinco.product.autoDSL.generator.autodslGenerator.DSLGenerator",
"/src-gen/")
graphModel AutoDSL {
	package info.scce.cinco.product.autoDSL.autodsl
	nsURI "http://cinco.scce.info/product/autodsl"
	diagramExtension "autodsl"

	containableElements(
		OffState [1,1],
		State [0,*],
		Guard [0,*]
	)

	@style(stateOff)
	node OffState {
		incomingEdges (GuardToState[0,*])
		outgoingEdges (StateToGuard[1,*])
	}

	@style(state, "${label}")
	container State {
		attr EString as label := "Unnamed"
		containableElements(
			State [0,1],
			ComponentNode [0,*]
		)
		incomingEdges (GuardToState[1,*])
		outgoingEdges (StateToGuard[0,*])
	}
	
	@style(guard, "${label}")
	container Guard {
		attr EString as label := "Unnamed" 
     	containableElements(
			ComponentNode[1,1]
		)
		incomingEdges(StateToGuard[1,*])
		outgoingEdges(GuardToState[1,1])
	}
	

	@postCreate("info.scce.cinco.product.autoDSL.hooks.DropRuleHook")
	@doubleClickAction("info.scce.cinco.product.autoDSL.hooks.OpenRuleModel")
	@style(syscomponent, "${label}")
	node ComponentNode {
		prime rule::Rule as rule
		@readOnly
		attr EString as label
		incomingEdges(SyscompToSyscomp[0,1])
		outgoingEdges(SyscompToSyscomp[0,1])
	}	
	
	
	@style(simpleArrow)
	edge SyscompToSyscomp {
	}
	
	@style(simpleArrow)
	edge StateToGuard {
		
	}
	
	@style(simpleArrow)
	edge GuardToState {
		
	}

}

