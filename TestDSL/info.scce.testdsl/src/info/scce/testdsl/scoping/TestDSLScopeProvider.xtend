/*
 * generated by Xtext 2.9.1
 */
package info.scce.testdsl.scoping

import com.google.common.base.Function
import de.jabc.cinco.meta.runtime.xapi.FileExtension
import de.jabc.cinco.meta.runtime.xapi.WorkspaceExtension
import graphmodel.Node
import info.scce.cinco.product.autoDSL.sharedMemory.sharedmemory.SharedMemory
import info.scce.cinco.product.autoDSL.sharedMemory.sharedmemory.StoredData
import info.scce.testdsl.testDSL.MonitorData
import info.scce.testdsl.testDSL.TestDSLPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TestDSLScopeProvider extends AbstractTestDSLScopeProvider {
	
	protected extension WorkspaceExtension = new WorkspaceExtension
	protected extension FileExtension = new FileExtension
	
	override getScope(EObject ctx, EReference ref) {
		if (ctx instanceof MonitorData && ref == TestDSLPackage.Literals.MONITOR_DATA__REF) {
			val imp = (ctx as MonitorData).importScope;
			if (imp.path != null) {
				val model = ctx.getGraphModel(imp.path);
				if (model != null && model instanceof SharedMemory) {
					return Scopes.scopeFor(model.allNodes, QualifiedName.wrapper(new LabelResolver), IScope.NULLSCOPE)				
				}
			}
		}
		return super.getScope(ctx, ref)
	}

	def getGraphModel(EObject obj, String filename) {
		obj.resource?.project?.getFile(filename)?.graphModel
	}
	
	static class LabelResolver implements Function<Node, String> {
		
		override apply(Node t) {
			if (t instanceof StoredData) t.label else null
		}
		
	}
}
