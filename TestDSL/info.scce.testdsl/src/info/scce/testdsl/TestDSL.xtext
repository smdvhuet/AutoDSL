grammar info.scce.testdsl.TestDSL with org.eclipse.xtext.common.Terminals

import "http://cinco.scce.info/product/sharedMemory" as monitor
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate testDSL "http://www.scce.info/testdsl/TestDSL"

prog: 
	(imports+=Import)*
	ops+=(Monitor | Test | Configuration | Variable)*
;

Import:
//	'import' importedNamespace=STRING
	'import' path=STRING 'as' name=ID
;

Configuration:
	"def" "Configuration" name=ID "{"
	 	monitors+=[Monitor] (","monitors+=[Monitor])*
	 "}"
;

Monitor:
	{Monitor} "def" "Monitor" name=ID "{"
		tests+=[Test] ("," tests+=[Test])* 
	"}"
;

Test:
	{Test} "def" "Test" name=ID "{"
	"Invariants" "{"
		invariants = Invariants
	"}"
	("Conditions" "{"
		conditions = Invariants
	"}")?
	("Options" "{"
		("Delay" "=" delay = INT) ?
		("TimesToRun" "=" timesToRun = INT) ?
		("RunFrequency" "=" runFrequence = INT)?
	"}") ?
	"}"
;

Invariants: 
    {Invariants} invs+= Expression ("," invs+=Expression ",")*
;

Variable:
	"def" name=ID ":" expr=Expression	
;

Expression: 
 	OrExpr
;

OrExpr returns Expression:
	AndExpr ({Or.left=current} op='or' right=AndExpr)*
;

AndExpr returns Expression:
	RelExpr ({And.left=current} op='and' right=RelExpr)*
;

RelExpr returns Expression:
	AddExpr ({Rel.left=current} op=('<'|'<='|'=='|'!='|'>'|'>=') right=AddExpr)*
;

AddExpr returns Expression:
	MultExpr ({Add.left=current} op=('+'|'-') right=MultExpr)*
;

MultExpr returns Expression:
	UnExpr ({Mult.left=current} op=('*'|'/') right=UnExpr)*
;

UnExpr returns Expression: 
	{Negation} op=('!'|"-") exprAtom=AtomExpr | AtomExpr
;

AtomExpr returns Expression: 
	{IntLiteral} value=INT
	| {BoolLiteral} ("true" | "false")	
	| '(' expr=Expression ')'
	| {MonitorData} importScope=[Import] '.' ref=[monitor::StoredData] diff=TimeDiffExtension?
	| intvar=INT_VAR diff=TimeDiffExtension?| boolvar=BOOL_VAR diff=TimeDiffExtension?
	| var=[Variable]
	| leftState=State op=('=='|"!=") rightState=State
;


State:
	{State}
	(("adasState" diff=TimeDiffExtension?) | lit=TEMPSTATES)
;

TimeDiffExtension:
	{TimeDiffExtension} '[' timeDiff=INT ('ms')? ']'
;

terminal TEMPSTATES:
	"StateA" | "StateB"
;
terminal INT_VAR: 
	"DistanceFront" | "DistanceRear" | "TimeDistanceFront" | "LeadingCarRelativeSpeed" | "Throttle" | "Brake" | "Steering" | "SetSpeed" | "SetDistance" | "InputThrottle" | "InputBrake"
;

terminal BOOL_VAR: 
	"SystemOnButton" | "SystemActiveButton" | "HasLeadingCar" | "HasEngineError" | "HasSteeringError" | "HasGearboxError" | "DecrementSetDistanceButton" | "IncrementSetDistanceButton" | "DecrementSetSpeedButton" | "IncrementSetSpeedButton" | "ObstacleDetectedWarning" | "ErrorWarning" | "SystemOn" | "SystemActive" | "HeadlightsOn" 
;