/*
 * generated by Xtext 2.9.1
 */
package info.scce.testdsl.ui.contentassist

import de.jabc.cinco.meta.runtime.xapi.FileExtension
import de.jabc.cinco.meta.runtime.xapi.WorkspaceExtension
import info.scce.cinco.product.autoDSL.sharedMemory.sharedmemory.SharedMemory
import info.scce.cinco.product.autoDSL.sharedMemory.sharedmemory.StoredData
import info.scce.testdsl.testDSL.MonitorData
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import info.scce.testdsl.testDSL.State
import info.scce.cinco.product.autoDSL.autodsl.autodsl.AutoDSL

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class TestDSLProposalProvider extends AbstractTestDSLProposalProvider {
	
	protected extension WorkspaceExtension = new WorkspaceExtension
	protected extension FileExtension = new FileExtension
	
	override completeAtomExpr_Ref(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeAtomExpr_Ref(model, assignment, context, acceptor)
		if (model instanceof MonitorData) {
			val mem = model.getGraphModel((model as MonitorData).importScope.path)
			if (mem != null && mem instanceof SharedMemory) {
				mem.allNodes.forEach[
					acceptor.accept(createCompletionProposal((it as StoredData).label, context))
				]
			}
		
		}
	}
	
	override completeState_Ref(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeState_Ref(model, assignment, context, acceptor)
		if (model instanceof State) {
			val dsl = model.getGraphModel((model as State).importScope.path)
			if (dsl != null && dsl instanceof AutoDSL) {
				dsl.allNodes.forEach[
					acceptor.accept(createCompletionProposal((it as info.scce.cinco.product.autoDSL.autodsl.autodsl.State).label, context))
				]
			}
		
		}
	}
	
	def getGraphModel(EObject obj, String filename) {
		obj.resource?.project?.getFile(filename)?.graphModel
	}
}
